	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	{
		"Code Review Request": {
			"prefix": "@review",
			"body": [
				"@workspace Please review this code for:",
				"- Performance optimization opportunities",
				"- Security vulnerabilities",
				"- Code quality improvements",
				"- TypeScript best practices",
				"- El Toro coding standards compliance",
				"",
				"Focus on: $1",
				"Context: $2"
			],
			"description": "Comprehensive code review prompt"
		},
		"Architecture Analysis": {
			"prefix": "@arch",
			"body": [
				"@workspace Analyze the architecture of this code:",
				"- Design patterns used",
				"- Scalability considerations",
				"- Integration points",
				"- Potential refactoring opportunities",
				"",
				"Specific focus: $1"
			],
			"description": "Architecture analysis prompt"
		},
		"Bug Investigation": {
			"prefix": "@debug",
			"body": [
				"@workspace Help debug this issue:",
				"- Analyze the error/unexpected behavior",
				"- Identify root cause",
				"- Suggest specific fixes",
				"- Recommend prevention strategies",
				"",
				"Error details: $1",
				"Expected behavior: $2"
			],
			"description": "Bug investigation and fix prompt"
		},
		"Test Generation": {
			"prefix": "@test",
			"body": [
				"@workspace Generate comprehensive tests for this code:",
				"- Unit tests with Jest",
				"- Edge cases and error scenarios",
				"- Mock external dependencies",
				"- Follow El Toro testing patterns",
				"",
				"Test focus: $1",
				"Coverage requirements: $2"
			],
			"description": "Test generation prompt"
		},
		"Performance Optimization": {
			"prefix": "@perf",
			"body": [
				"@workspace Optimize this code for performance:",
				"- Memory usage analysis",
				"- Time complexity improvements",
				"- Database query optimization",
				"- Caching opportunities",
				"",
				"Performance target: $1",
				"Current bottleneck: $2"
			],
			"description": "Performance optimization prompt"
		},
		"API Documentation": {
			"prefix": "@docs",
			"body": [
				"@workspace Generate API documentation for:",
				"- Method signatures and parameters",
				"- Usage examples",
				"- Error handling",
				"- Integration patterns",
				"",
				"Documentation style: $1",
				"Target audience: $2"
			],
			"description": "API documentation generation"
		},
		"Implementation Workflow": {
			"prefix": "@proceed",
			"body": [
				"@workspace Go ahead and continue with the implementation of: ${1:READ .github/instructions/*.tasks.instructions.md and determine the next pending task}",
				"",
				"**Workflow Requirements:**",
				"At the completion of each sub-task:",
				"1. Explain the changes you made",
				"2. Ask me if I approve",
				"3. If I approve, perform a comprehensive review of the work done",
				"4. Create a task analysis document and save it in \".github/docs\"",
				"5. Update both the planning and tasks instructions to reflect the changes",
				"6. Commit all changes with a very short commit message and push them up to github using the appropriate git commands",
				"7. Explain the next sub-task to me, what files you're going to be changing and what code you're planning to change in those files",
				"8. Ask if I want to proceed, only continuing if I agree to continue",
				"",
				"**Code Standards:**",
				"- Follow existing design patterns",
				"- Write code that is declarative and functional where possible",
				"- Maintain El Toro coding standards",
				"",
				"**Implementation Focus:** ${2:determine from tasks file - what needs to be implemented and any critical issues}",
				"**Expected Deliverables:** ${3:determine from tasks file - specific deliverables for the next pending task}"
			],
			"description": "Comprehensive implementation workflow with approval gates"
		}
	}